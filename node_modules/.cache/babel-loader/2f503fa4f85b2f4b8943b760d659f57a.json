{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/Desktop/apresentation/src/providers/github-provider.js\",\n    _s = $RefreshSig$();\n\n// TODAS AS CHAMADAS DA API FICARÃO AQUI\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = ({\n  children\n}) => {\n  _s();\n\n  const [githubState, setGithubState] = useState({\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0\n    },\n    repositories: [],\n    starred: []\n  }); //função criada para buscar\n\n  const getUser = async username => {\n    api.get(`users/${username}`).then(({\n      data: {\n        user\n      }\n    }) => {\n      setGithubState(prevState => ({ ...prevState,\n        user: {\n          id: data.id,\n          avatar: data.avatar_url,\n          login: data.login,\n          name: data.name,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubProvider, \"pD5Bs6G7/jGRJ6swRji+HsEoi7Q=\");\n\n_c = GithubProvider;\nexport default GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"sources":["/home/guilherme/Desktop/apresentation/src/providers/github-provider.js"],"names":["React","createContext","useState","GithubContext","loading","user","repositories","starred","GithubProvider","children","githubState","setGithubState","login","undefined","name","html_url","blog","company","location","followers","following","public_gists","public_repos","getUser","username","api","get","then","data","prevState","id","avatar","avatar_url","contextValue"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;;AAEA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC;AACzCG,EAAAA,OAAO,EAAE,KADgC;AAEzCC,EAAAA,IAAI,EAAE,EAFmC;AAGzCC,EAAAA,YAAY,EAAE,EAH2B;AAIzCC,EAAAA,OAAO,EAAE;AAJgC,CAAD,CAAnC;;AAOP,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC;AAC7CG,IAAAA,IAAI,EAAE;AACJO,MAAAA,KAAK,EAAEC,SADH;AAEJC,MAAAA,IAAI,EAAED,SAFF;AAGJE,MAAAA,QAAQ,EAAEF,SAHN;AAIJG,MAAAA,IAAI,EAAEH,SAJF;AAKJI,MAAAA,OAAO,EAAEJ,SALL;AAMJK,MAAAA,QAAQ,EAAEL,SANN;AAOJM,MAAAA,SAAS,EAAE,CAPP;AAQJC,MAAAA,SAAS,EAAE,CARP;AASJC,MAAAA,YAAY,EAAE,CATV;AAUJC,MAAAA,YAAY,EAAE;AAVV,KADuC;AAa7ChB,IAAAA,YAAY,EAAE,EAb+B;AAc7CC,IAAAA,OAAO,EAAE;AAdoC,GAAD,CAA9C,CADuC,CAkBvC;;AAEA,QAAMgB,OAAO,GAAG,MAAOC,QAAP,IAAoB;AAClCC,IAAAA,GAAG,CAACC,GAAJ,CAAS,SAAQF,QAAS,EAA1B,EAA6BG,IAA7B,CAAkC,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAEvB,QAAAA;AAAF;AAAR,KAAD,KAAwB;AACxDM,MAAAA,cAAc,CAAEkB,SAAD,KAAgB,EAC7B,GAAGA,SAD0B;AAE7BxB,QAAAA,IAAI,EAAE;AACJyB,UAAAA,EAAE,EAAEF,IAAI,CAACE,EADL;AAEJC,UAAAA,MAAM,EAAEH,IAAI,CAACI,UAFT;AAGJpB,UAAAA,KAAK,EAAEgB,IAAI,CAAChB,KAHR;AAIJE,UAAAA,IAAI,EAAEc,IAAI,CAACd,IAJP;AAKJC,UAAAA,QAAQ,EAAEa,IAAI,CAACb,QALX;AAMJC,UAAAA,IAAI,EAAEY,IAAI,CAACZ,IANP;AAOJC,UAAAA,OAAO,EAAEW,IAAI,CAACX,OAPV;AAQJC,UAAAA,QAAQ,EAAEU,IAAI,CAACV,QARX;AASJC,UAAAA,SAAS,EAAES,IAAI,CAACT,SATZ;AAUJC,UAAAA,SAAS,EAAEQ,IAAI,CAACR,SAVZ;AAWJC,UAAAA,YAAY,EAAEO,IAAI,CAACP,YAXf;AAYJC,UAAAA,YAAY,EAAEM,IAAI,CAACN;AAZf;AAFuB,OAAhB,CAAD,CAAd;AAiBD,KAlBD;AAmBD,GApBD;;AAsBA,QAAMW,YAAY,GAAG;AACnBvB,IAAAA;AADmB,GAArB;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEuB,YAA/B;AAAA,cACGxB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnDD;;GAAMD,c;;KAAAA,c;AAqDN,eAAeA,cAAf","sourcesContent":["// TODAS AS CHAMADAS DA API FICARÃO AQUI\n\nimport React, { createContext, useState } from \"react\";\n\nexport const GithubContext = createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: [],\n});\n\nconst GithubProvider = ({ children }) => {\n  const [githubState, setGithubState] = useState({\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0,\n    },\n    repositories: [],\n    starred: [],\n  });\n\n  //função criada para buscar\n\n  const getUser = async (username) => {\n    api.get(`users/${username}`).then(({ data: { user } }) => {\n      setGithubState((prevState) => ({\n        ...prevState,\n        user: {\n          id: data.id,\n          avatar: data.avatar_url,\n          login: data.login,\n          name: data.name,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos,\n        },\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n  };\n\n  return (\n    <GithubContext.Provider value={contextValue}>\n      {children}\n    </GithubContext.Provider>\n  );\n};\n\nexport default GithubProvider;\n"]},"metadata":{},"sourceType":"module"}